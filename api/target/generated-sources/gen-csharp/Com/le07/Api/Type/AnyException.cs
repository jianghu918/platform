/**
 * Autogenerated by Thrift Compiler (0.9.0-any)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Com.le07.Api.Type
{

  /// <summary>
  /// 通用错误对象
  /// 
  /// @field code 错误代码
  /// 
  /// @field msg 错误消息
  /// 
  /// @field stackTraces 错误堆栈，供调试用
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AnyException : Exception, TBase
  {
    private int _code;
    private string _msg;
    private List<StackTrace> _stackTraces;

    public int Code
    {
      get
      {
        return _code;
      }
      set
      {
        __isset.code = true;
        this._code = value;
      }
    }

    public string Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }

    public List<StackTrace> StackTraces
    {
      get
      {
        return _stackTraces;
      }
      set
      {
        __isset.stackTraces = true;
        this._stackTraces = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool code;
      public bool msg;
      public bool stackTraces;
    }

    public AnyException() {
      this._code = 1;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Code = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Msg = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                StackTraces = new List<StackTrace>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  StackTrace _elem2 = new StackTrace();
                  _elem2 = new StackTrace();
                  _elem2.Read(iprot);
                  StackTraces.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AnyException");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.code) {
        field.Name = "code";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Code);
        oprot.WriteFieldEnd();
      }
      if (Msg != null && __isset.msg) {
        field.Name = "msg";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Msg);
        oprot.WriteFieldEnd();
      }
      if (StackTraces != null && __isset.stackTraces) {
        field.Name = "stackTraces";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, StackTraces.Count));
          foreach (StackTrace _iter3 in StackTraces)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AnyException(");
      sb.Append("Code: ");
      sb.Append(Code);
      sb.Append(",Msg: ");
      sb.Append(Msg);
      sb.Append(",StackTraces: ");
      sb.Append(StackTraces);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
