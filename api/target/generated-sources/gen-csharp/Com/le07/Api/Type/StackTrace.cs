/**
 * Autogenerated by Thrift Compiler (0.9.0-any)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Com.le07.Api.Type
{

  /// <summary>
  /// 异常堆栈对象
  /// 
  /// @field className 发生异常的类
  /// 
  /// @field methodName 发生异常的方法
  /// 
  /// @field fileName 发生异常的文件
  /// 
  /// @field lineNumber 发生异常的行号
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StackTrace : TBase
  {
    private string _className;
    private string _methodName;
    private string _fileName;
    private int _lineNumber;

    public string ClassName
    {
      get
      {
        return _className;
      }
      set
      {
        __isset.className = true;
        this._className = value;
      }
    }

    public string MethodName
    {
      get
      {
        return _methodName;
      }
      set
      {
        __isset.methodName = true;
        this._methodName = value;
      }
    }

    public string FileName
    {
      get
      {
        return _fileName;
      }
      set
      {
        __isset.fileName = true;
        this._fileName = value;
      }
    }

    public int LineNumber
    {
      get
      {
        return _lineNumber;
      }
      set
      {
        __isset.lineNumber = true;
        this._lineNumber = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool className;
      public bool methodName;
      public bool fileName;
      public bool lineNumber;
    }

    public StackTrace() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ClassName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              MethodName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              FileName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              LineNumber = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StackTrace");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ClassName != null && __isset.className) {
        field.Name = "className";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ClassName);
        oprot.WriteFieldEnd();
      }
      if (MethodName != null && __isset.methodName) {
        field.Name = "methodName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MethodName);
        oprot.WriteFieldEnd();
      }
      if (FileName != null && __isset.fileName) {
        field.Name = "fileName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FileName);
        oprot.WriteFieldEnd();
      }
      if (__isset.lineNumber) {
        field.Name = "lineNumber";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LineNumber);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StackTrace(");
      sb.Append("ClassName: ");
      sb.Append(ClassName);
      sb.Append(",MethodName: ");
      sb.Append(MethodName);
      sb.Append(",FileName: ");
      sb.Append(FileName);
      sb.Append(",LineNumber: ");
      sb.Append(LineNumber);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
