/**
 * Autogenerated by Thrift Compiler (0.9.0-any)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Com.le07.Api.Test
{
  public partial class TestService {
    /// <summary>
    /// 这是一个测试服务
    /// 
    /// 测试服务简要描述
    /// </summary>
    public interface Iface {
      /// <summary>
      /// 具体方法简要描述说明
      /// </summary>
      /// <param name="offset">偏移量</param>
      /// <param name="size">抓取数量</param>
      List<TestEntity> lists(long offset, long size);
      #if SILVERLIGHT
      IAsyncResult Begin_lists(AsyncCallback callback, object state, long offset, long size);
      List<TestEntity> End_lists(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// 这是一个测试服务
    /// 
    /// 测试服务简要描述
    /// </summary>
    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_lists(AsyncCallback callback, object state, long offset, long size)
      {
        return send_lists(callback, state, offset, size);
      }

      public List<TestEntity> End_lists(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_lists();
      }

      #endif

      /// <summary>
      /// 具体方法简要描述说明
      /// </summary>
      /// <param name="offset">偏移量</param>
      /// <param name="size">抓取数量</param>
      public List<TestEntity> lists(long offset, long size)
      {
        #if !SILVERLIGHT
        send_lists(offset, size);
        return recv_lists();

        #else
        var asyncResult = Begin_lists(null, null, offset, size);
        return End_lists(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_lists(AsyncCallback callback, object state, long offset, long size)
      #else
      public void send_lists(long offset, long size)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("lists", TMessageType.Call, seqid_));
        lists_args args = new lists_args();
        args.Offset = offset;
        args.Size = size;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TestEntity> recv_lists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        lists_result result = new lists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "lists failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["lists"] = lists_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void lists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        lists_args args = new lists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        lists_result result = new lists_result();
        try {
          result.Success = iface_.lists(args.Offset, args.Size);
        } catch (Com.le07.Api.Type.AnyException ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("lists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class lists_args : TBase
    {
      private long _offset;
      private long _size;

      /// <summary>
      /// 偏移量
      /// </summary>
      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      /// <summary>
      /// 抓取数量
      /// </summary>
      public long Size
      {
        get
        {
          return _size;
        }
        set
        {
          __isset.size = true;
          this._size = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool offset;
        public bool size;
      }

      public lists_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Offset = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Size = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("lists_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.offset) {
          field.Name = "offset";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Offset);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Size);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("lists_args(");
        sb.Append("Offset: ");
        sb.Append(Offset);
        sb.Append(",Size: ");
        sb.Append(Size);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class lists_result : TBase
    {
      private List<TestEntity> _success;
      private Com.le07.Api.Type.AnyException _ex;

      public List<TestEntity> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Com.le07.Api.Type.AnyException Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public lists_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TestEntity>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    TestEntity _elem2 = new TestEntity();
                    _elem2 = new TestEntity();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new Com.le07.Api.Type.AnyException();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("lists_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TestEntity _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("lists_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
