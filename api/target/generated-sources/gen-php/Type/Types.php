<?php
namespace Type;

/**
 * Autogenerated by Thrift Compiler (0.9.0-any)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


final class Status {
  const ENABLED = 0;
  const DISABLED = 1;
  const DELETED = 2;
  static public $__names = array(
    0 => 'ENABLED',
    1 => 'DISABLED',
    2 => 'DELETED',
  );
}

class StackTrace extends TBase {
  static $_TSPEC;

  public $className = null;
  public $methodName = null;
  public $fileName = null;
  public $lineNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'className',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'methodName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'fileName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'lineNumber',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'StackTrace';
  }

  public function read($input)
  {
    return $this->_read('StackTrace', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('StackTrace', self::$_TSPEC, $output);
  }
}

class AnyException extends TException {
  static $_TSPEC;

  public $code = 1;
  public $msg = null;
  public $stackTraces = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'stackTraces',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Type\StackTrace',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'AnyException';
  }

  public function read($input)
  {
    return $this->_read('AnyException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('AnyException', self::$_TSPEC, $output);
  }
}

$GLOBALS['Type_CONSTANTS']['JSON'] = "_json";

$GLOBALS['Type_CONSTANTS']['TRUE_BOOLEAN'] = 1;

$GLOBALS['Type_CONSTANTS']['FALSE_BOOLEAN'] = -1;

$GLOBALS['Type_CONSTANTS']['NULL_BOOLEAN'] = 0;

$GLOBALS['Type_CONSTANTS']['NULL_SHORT'] = 0;

$GLOBALS['Type_CONSTANTS']['NULL_INT'] = 0;

$GLOBALS['Type_CONSTANTS']['NULL_LONG'] = 0;

$GLOBALS['Type_CONSTANTS']['NULL_DOUBLE'] = 0;

$GLOBALS['Type_CONSTANTS']['NULL_DATE'] = 0;

$GLOBALS['Type_CONSTANTS']['SECONDS_PER_MINUTE'] = 60;

$GLOBALS['Type_CONSTANTS']['SECONDS_PER_HOUR'] = 3600;

$GLOBALS['Type_CONSTANTS']['SECONDS_PER_DAY'] = 86400;

$GLOBALS['Type_CONSTANTS']['SECONDS_PER_WEEK'] = 604800;

$GLOBALS['Type_CONSTANTS']['SECONDS_PER_MONTH'] = 18144000;


