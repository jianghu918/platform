//
// Autogenerated by Thrift Compiler (0.9.0-any)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

if (typeof Type === 'undefined') {
  Type = {};
}
Type.Status = {
'ENABLED' : 0,
'DISABLED' : 1,
'DELETED' : 2
};
Type.StackTrace = function(args) {
  this.className = null;
  this.methodName = null;
  this.fileName = null;
  this.lineNumber = null;
  if (args) {
    if (args.className !== undefined) {
      this.className = args.className;
    }
    if (args.methodName !== undefined) {
      this.methodName = args.methodName;
    }
    if (args.fileName !== undefined) {
      this.fileName = args.fileName;
    }
    if (args.lineNumber !== undefined) {
      this.lineNumber = args.lineNumber;
    }
  }
};
Type.StackTrace.prototype = {};
Type.StackTrace.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.className = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.methodName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.lineNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Type.StackTrace.prototype.write = function(output) {
  output.writeStructBegin('StackTrace');
  if (this.className !== null && this.className !== undefined) {
    output.writeFieldBegin('className', Thrift.Type.STRING, 1);
    output.writeString(this.className);
    output.writeFieldEnd();
  }
  if (this.methodName !== null && this.methodName !== undefined) {
    output.writeFieldBegin('methodName', Thrift.Type.STRING, 2);
    output.writeString(this.methodName);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 3);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.lineNumber !== null && this.lineNumber !== undefined) {
    output.writeFieldBegin('lineNumber', Thrift.Type.I32, 4);
    output.writeI32(this.lineNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Type.AnyException = function(args) {
  this.code = 1;
  this.msg = null;
  this.stackTraces = null;
  if (args) {
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
    if (args.stackTraces !== undefined) {
      this.stackTraces = args.stackTraces;
    }
  }
};
Thrift.inherits(Type.AnyException, Thrift.TException);
Type.AnyException.prototype.name = 'AnyException';
Type.AnyException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.stackTraces = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Type.StackTrace();
          elem6.read(input);
          this.stackTraces.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Type.AnyException.prototype.write = function(output) {
  output.writeStructBegin('AnyException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.stackTraces !== null && this.stackTraces !== undefined) {
    output.writeFieldBegin('stackTraces', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.stackTraces.length);
    for (var iter7 in this.stackTraces)
    {
      if (this.stackTraces.hasOwnProperty(iter7))
      {
        iter7 = this.stackTraces[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Type.JSON = '_json';
Type.TRUE_BOOLEAN = 1;
Type.FALSE_BOOLEAN = -1;
Type.NULL_BOOLEAN = 0;
Type.NULL_SHORT = 0;
Type.NULL_INT = 0;
Type.NULL_LONG = 0;
Type.NULL_DOUBLE = 0;
Type.NULL_DATE = 0;
Type.SECONDS_PER_MINUTE = 60;
Type.SECONDS_PER_HOUR = 3600;
Type.SECONDS_PER_DAY = 86400;
Type.SECONDS_PER_WEEK = 604800;
Type.SECONDS_PER_MONTH = 18144000;
