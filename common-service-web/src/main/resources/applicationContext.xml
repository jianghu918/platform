<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <import resource="applicationContext-profile.xml"/>

    <jpa:repositories base-package="com.le07.commonservice"/>

    <context:annotation-config/>

    <context:component-scan base-package="com.le07.commonservice">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames" value="classpath:message/errors,classpath:message/messages"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

    <bean class="com.le07.framework.message.NLS">
        <property name="messageProvider">
            <bean class="com.le07.framework.message.SpringMessageProvider">
                <property name="messageSource" ref="messageSource"/>
            </bean>
        </property>
    </bean>

    <!--<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        &lt;!&ndash;<property name="namingStrategy">
            <bean class="com.le07.framework.support.hibernate.PrefixNamingStrategy">
                <property name="prefix" value="cs_"/>
            </bean>
        </property>&ndash;&gt;
        <property name="packagesToScan" value="com.le07.commonservice"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.default_schema">${db.username}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.jdbc.fetch_size">50</prop>
                <prop key="hibernate.jdbc.batch_size">25</prop>
                <prop key="use_streams_for_binary">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">
                    org.hibernate.cache.ehcache.EhCacheRegionFactory
                </prop>
                <prop key="hibernate.show_sql">${hibernate.debug}</prop>
                <prop key="hibernate.format_sql">${hibernate.debug}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.debug}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            </props>
        </property>
    </bean>-->

    <!-- entityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.le07.commonservice.file.model"/>
        <property name="persistenceProviderClass" value="org.hibernate.ejb.HibernatePersistence"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.default_schema">${db.default_schema}</prop>
                <prop key="hibernate.ejb.naming_strategy">com.le07.framework.support.hibernate.CS_PrefixNamingStrategy</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.jdbc.fetch_size">50</prop>
                <prop key="hibernate.jdbc.batch_size">25</prop>
                <prop key="use_streams_for_binary">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="hibernate.show_sql">${hibernate.debug}</prop>
                <prop key="hibernate.format_sql">${hibernate.debug}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.debug}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
            </props>
        </property>
    </bean>


    <!-- spring cache annotation -->
    <!--<bean id="springCacheManager" class="com.le07.framework.cache.spring.SpringCacheManagerAdapter">
        <constructor-arg index="0" ref="cacheManager"/>
    </bean>

    <cache:annotation-driven cache-manager="springCacheManager"/>-->

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!--<bean id="transactionManager" class="com.le07.framework.support.spring.tx.Hibernate4ReadonlyTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>-->

    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>


    <!--  task -->
    <bean id="threadResourceManager" class="com.le07.framework.support.spring.tx.DefaultThreadResourceManager">
        <property name="providers">
            <list>
                <!--<bean class="com.le07.framework.support.spring.tx.HibernateResourceProvider">
                    <property name="sessionFactory" ref="sessionFactory"/>
                </bean>-->
                <bean class="com.le07.framework.support.spring.tx.JpaResourceProvider">
                    <property name="entityManagerFactory" ref="entityManagerFactory"/>
                </bean>
                <!--
                <bean class="com.le07.framework.support.spring.tx.RedisResourceProvider">
                    <property name="connectionFactory" ref="redisConnectionFactory"/>
                </bean>-->
            </list>
        </property>
    </bean>

    <bean id="taskExecutor" class="com.le07.framework.support.spring.tx.ThreadResourceSupportTaskExecutor">
        <property name="corePoolSize" value="1"/>
        <property name="maxPoolSize" value="2"/>
        <property name="queueCapacity" value="100000"/>
        <property name="threadResourceManager" ref="threadResourceManager"/>
    </bean>

    <bean id="taskScheduler" class="com.le07.framework.support.spring.tx.ThreadResourceSupportTaskScheduler">
        <property name="poolSize" value="5"/>
        <property name="threadResourceManager" ref="threadResourceManager"/>
    </bean>


    <!--<bean id="freemarkerConfigurer" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">0</prop>
                <prop key="localized_lookup">false</prop>
                <prop key="datetime_format">yyyy-MM-dd</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="number_format">0.######</prop>
                <prop key="boolean_format">true,false</prop>
                <prop key="defaultEncoding">UTF-8</prop>
            </props>
        </property>
        <property name="freemarkerVariables">
            <map>
                <entry key="_u">
                    <bean class="com.le07.commonservice.message.service.impl.MessageContext">
                        <property name="identityService" ref="identityService"/>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>-->


    <!--<bean id="identityService" class="com.le07.framework.support.thrift.ThriftHttpProxyFactoryBean">
        <property name="serviceUrl" value="${ids.url}"/>
        <property name="serviceInterface" value="com.le07.api.identity.IdentityService$Iface"/>
    </bean>-->


    <!-- validator -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    <bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor">
        <property name="validator" ref="validator"/>
    </bean>


    <!-- 事务自动代理设置ReadOnly
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager" />
    </bean>
    <bean id="autoProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value>
            </list>
        </property>
        <property name="beanNames">
             可以是Service或DAO层（最好是针对业务层*Service）
            <list>
                <value>*ServiceImpl</value>
                <value>*ManagerImpl</value>
            </list>
        </property>
    </bean>
    -->

    <!--自动代理还有一种用法就是结合正规表达式和advice使用。

    <bean id="transactionInterceptor"
          class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <property name="transactionManager">
        <ref bean="transactionManager" />
    </property>
    <bean id="autoProxyCreator"
          class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />
    <bean id="regexpMethodPointcutAdvisor"
          class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice">
            <ref bean="transactionInterceptor" />
        </property>
        <property name="pattern">
            <value>.*</value>
        </property>
    </bean>-->


    <!-- exception advice -->
    <bean id="anyExceptionAdvice" class="com.le07.framework.ex.ValidateExceptionAdvice"/>
    <!-- aop config -->

    <aop:config proxy-target-class="true">
        <aop:pointcut expression="execution(* com.le07.commonservice..impl.*.*(..))" id="servicePointCut"/>

        <aop:aspect ref="anyExceptionAdvice">
            <aop:after-throwing pointcut-ref="servicePointCut" method="afterThrowingValidationException" throwing="e"/>
        </aop:aspect>
    </aop:config>

    <aop:aspectj-autoproxy proxy-target-class="true"/>


    <!-- 事件服务 -->

</beans>
