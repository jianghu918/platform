<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

    <import resource="profile.xml"/>


    <context:annotation-config/>

    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="com.le07">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
       <!-- <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>-->
    </context:component-scan>


    <jpa:repositories base-package="com.le07.catering" transaction-manager-ref="transactionManager" />

    <!-- entityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="internalDataSource"/>
        <property name="packagesToScan" value="com.le07.catering.model"/>
        <property name="persistenceProviderClass" value="org.hibernate.ejb.HibernatePersistence"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.ejb.naming_strategy">
                    com.le07.framework.support.hibernate.Catring_PrefixNamingStrategy
                </prop>
                <prop key="hibernate.default_schema">${db.default_schema}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.jdbc.fetch_size">50</prop>
                <prop key="hibernate.jdbc.batch_size">25</prop>
                <prop key="use_streams_for_binary">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <!--<prop key="hibernate.cache.region.factory_class">com.le07.framework.cache.hibernate.CacheRegionFactory</prop> -->
                <prop key="hibernate.archive.autodetection">class</prop>
                <prop key="hibernate.show_sql">${hibernate.debug}</prop>
                <prop key="hibernate.format_sql">${hibernate.debug}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.debug}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
            </props>
        </property>
    </bean>

    <!-- cache
    <bean id="cacheManager" class="com.le07.framework.cache.redis.RedisCacheManager">
        <property name="connectionFactory" ref="redisConnectionFactory" />
        <property name="namespace" value="question" />
        <property name="defaultConfig">
            <bean class="com.le07.framework.cache.redis.RedisCacheConfig">
                <property name="enableKeyList" value="true" />
            </bean>
        </property>
    </bean>

    <bean id="cacheManagerCompetition" class="com.le07.framework.cache.redis.RedisCacheManager">
        <property name="connectionFactory" ref="redisConnectionFactory" />
        <property name="namespace" value="competition" />
        <property name="defaultConfig">
            <bean class="com.le07.framework.cache.redis.RedisCacheConfig">
                <property name="enableKeyList" value="true" />
                <property name="clearable" value="false" />
            </bean>
        </property>
    </bean>

    <bean id="cacheManagerFactory"
        class="com.le07.framework.cache.hibernate.CacheManagerFactory">
        <property name="cacheManager" ref="cacheManager" />
    </bean>

    <redis:listener-container>
        <redis:listener ref="bizConfigListener" topic="bizConfig:*"/>
    </redis:listener-container>

    <bean id="redisTemplate" class="com.le07.framework.support.redis.AnyRedisTemplate"/>

    <bean id="bizConfigListener" class="com.le07.framework.config.BizConfigEventListener">
        <property name="redis" ref="redisTemplate"/>
    </bean>
    -->

    <!-- transactionManager -->
    <!--<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <property name="jpaDialect">
            <bean class="com.le07.framework.support.hibernate.HibernateJpaIsolationSupportDialect"/>
        </property>
    </bean>-->

    <!-- Jpa 事务配置 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

    <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice> -->


    <!-- messagesource -->
    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>messages</value>
            </list>
        </property>
    </bean>

    <!-- i don't like this -->
    <bean class="com.le07.framework.message.NLS">
        <property name="messageProvider">
            <bean class="com.le07.framework.message.SpringMessageProvider">
                <property name="messageSource" ref="messageSource"/>
            </bean>
        </property>

    </bean>

    <!-- validator -->
    <bean id="validator"
          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    <bean
            class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor">
        <property name="validator" ref="validator"/>
    </bean>

    <!-- exception advice -->
    <bean id="anyExceptionAdvice" class="com.le07.framework.ex.ValidateExceptionAdvice">

    </bean>

    <!-- aop config -->
    <aop:aspectj-autoproxy proxy-target-class="false"/>
    <aop:config proxy-target-class="true">
        <aop:pointcut expression="execution(* com.le07.catering..impl.*.*(..))" id="servicePointCut"/>

        <aop:aspect ref="anyExceptionAdvice">
            <aop:after-throwing pointcut-ref="servicePointCut" method="afterThrowingValidationException" throwing="e"/>
        </aop:aspect>
    </aop:config>


    <bean id="internalDataSource"
          class="com.le07.framework.jdbc.datasource.InitializedDataSource">
        <property name="dataSource" ref="dataSource"/>
        <property name="updateSchema" value="${hibernate.hbm2ddl.auto}"/>
        <property name="scriptEncoding" value="UTF-8"/>
        <property name="scripts">
            <value>

            </value>
        </property>
    </bean>

    <!-- question no generator
    <bean id="questionNoGenerator"
        class="org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer">
        <property name="dataSource" ref="dataSourceForJdbc" />
        <property name="incrementerName" value="qa_question_sequence" />
        <property name="columnName" value="seq_question_no" />
        <property name="cacheSize" value="20" />
    </bean>   -->


    <!-- service -->
    <!--<bean id="authorizationService"
        class="com.le07.framework.support.thrift.ThriftHttpProxyFactoryBean">
        <property name="serviceUrl" value="${auth.url}/authorizationService" />
        <property name="serviceInterface"
            value="com.le07.api.authorization.AuthorizationService$Iface" />
    </bean>-->


    <bean id="threadResourceManager" class="com.le07.framework.support.spring.tx.DefaultThreadResourceManager">
        <property name="providers">
            <list>
                <bean class="com.le07.framework.support.spring.tx.JpaResourceProvider">
                    <property name="entityManagerFactory" ref="entityManagerFactory"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="taskExecutor" class="com.le07.framework.support.spring.tx.ThreadResourceSupportTaskExecutor">
        <property name="corePoolSize" value="1"/>
        <property name="maxPoolSize" value="2"/>
        <property name="queueCapacity" value="100000"/>
        <property name="threadResourceManager" ref="threadResourceManager"/>
    </bean>


    <!-- job -->


    <!-- spring cache annotation
    <bean id="springCacheManager" class="com.le07.framework.cache.spring.SpringCacheManagerAdapter">
        <constructor-arg index="0" ref="cacheManager"></constructor-arg>
    </bean>
    <cache:annotation-driven cache-manager="springCacheManager"/>
    -->











    <!-- Thrift export
    <bean name="/cateringService" class="com.le07.framework.support.thrift.ThriftHttpServiceExporter">
    	<property name="service" ref="thriftCateringService" />
        <property name="serviceInterface" value="com.le07.api.catering.CateringService$Iface"/>
        <property name="proxyTargetClass" value="false"/>
    </bean>
    -->



    <!-- 引用服务 -->
    <bean id="identityService" class="com.le07.framework.support.thrift.ThriftHttpProxyFactoryBean">
        <property name="serviceUrl" value="${base.url}/cs/identityService"/>
        <property name="serviceInterface" value="com.le07.api.identity.IdentityService$Iface"/>
    </bean>

</beans>
